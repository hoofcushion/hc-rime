schema:
 dependencies:
  - custom_phrase
  - custom_symbol
engine:
 processors:
  - ascii_composer
  - recognizer
  - key_binder
  - lua_processor@*keymap*processor
  - lua_processor@*quick_warp*processor
  - lua_processor@*shape-filter*processor
  - speller
  - punctuator
  - selector
  - navigator
  - express_editor
  - lua_processor@*commit-recorder*processor@recorder
 segmentors:
  - ascii_segmentor
  - matcher
  - abc_segmentor
  - punct_segmentor
  - fallback_segmentor
 translators:
  - punct_translator
  - lua_translator@*execute*translator@execute
  - lua_translator@*chinese_number*translator@chinese_number
  - lua_translator@unicode
  - lua_translator@*custom_word*translator@custom_word
  - lua_translator@custom_time
  - lua_translator@*custom_symbol*translator@custom_symbol
  - table_translator@custom_phrase # 自定义短语
 filters:
  - simplifier@fil_s2t
  - simplifier@fil_emoji
  - simplifier@fil_users
  - simplifier@fil_symbol
  - simplifier@fil_zhuyin
  - simplifier@fil_huoxin
  - simplifier@fil_trans
  - lua_filter@*cand-continuous-len*filter@6
  - lua_filter@*cand-limit*filter@100 # show only 100 cands
  - lua_filter@*uniquifier*filter
  - lua_filter@*cand-details*filter
  - lua_filter@*cand-reverse*filter@fil_KijinSeija
  - lua_filter@*cand-unicode*filter@fil_Unicode
  - lua_filter@*shape-filter*filter
execute:
 initial_quality: 64
 prefix: "//" #汉字数字+金额 整数支持最高52位
 tag: "execute"
chinese_number:
 initial_quality: 64
 prefix: "/J" #汉字数字+金额 整数支持最高52位
 tag: "chinese_number"
custom_symbol:
 initial_quality: 64
 prefix: '\'
 tag: "custom_symbol"
 # comment: ""
 # tips: ""
custom_word:
 initial_quality: 64
 user_dict: custom_word
 suffix: "-="
 delimiter: "|"
custom_phrase:
 initial_quality: 64
 dictionary: custom_phrase
 enable_user_dict: false
 enable_completion: false
 enable_sentence: false
custom_symbol:
 initial_quality: 64
 dictionary: custom_symbol
 enable_user_dict: true
 tag: custom_symbol
fil_for_all: &fil_for_all
 tips: all
 tags: [abc]
fil_s2t:
 <<: *fil_for_all
 option_name: fil_s2t
 opencc_config: s2t.json
fil_emoji:
 opencc_config: emoji.json
 <<: *fil_for_all
 option_name: fil_emoji
fil_users:
 <<: *fil_for_all
 option_name: fil_emoji
 opencc_config: users.json
fil_symbol:
 <<: *fil_for_all
 option_name: fil_symbol
 opencc_config: sym.json
fil_zhuyin:
 <<: *fil_for_all
 option_name: fil_zhuyin
 opencc_config: pinyin.json
 show_in_comment: true
 comment_format: [xform/&nbsp/｜/]
fil_huoxin:
 <<: *fil_for_all
 option_name: fil_huoxin
 opencc_config: huoxing.json
fil_trans:
 option_name: fil_trans
 opencc_config: dic_4w_en.json
 tips: all
 tags: [ts_en]
fil_KijinSeija:
 option_name: fil_KijinSeija
fil_Unicode:
 option_name: fil_Unicode
predictor:
 db: predict.db
 max_candidates: 10
 max_iterations: 1
speller:
 delimiter: " '"
punctuator:
 import_preset: default
recognizer:
 import_preset: default
 lua:
  unicode: "U" #Unicode
 patterns: #pattern 中单个 \ 要用 \\\\ 双重转义来表示
  execute: "^//.*" #计算器
  unicode: "^U(?:[HDOB]?[a-f0-9]*|[a-f0-9]*[HDOB]?)$" #Unicode
  chinese_number: "^/J.*" #汉字数字+金额 整数支持最高52位
  custom_symbol: '^\\(?:10?|[0-9]|[A-Za-z]+)?' #符号
ascii_composer:
 good_old_caps_lock: true
 switch_key:
  Shift_L: inline_ascii
  #Shift_R:    commit_text
  #Control_L:  noop
  #Control_R:  noop
  Caps_Lock: clear
  Eisu_toggle: clear
key_binder:
 bindings:
  # Editing, Inspire by Vim.
  - {accept: "Control+n", send: Down, when: composing}
  - {accept: "Control+p", send: Up, when: composing}
  - {accept: "Control+j", send: Page_Down, when: composing}
  - {accept: "Control+k", send: Page_Up, when: composing}
  - {accept: "Control+b", send: Left, when: composing}
  - {accept: "Control+f", send: Right, when: composing}
  - {accept: "Control+o", send: Control+Left, when: composing}
  - {accept: "Control+i", send: Control+Right, when: composing}
  # - {accept: "ISO_Left_Tab", send: Control+Left, when: composing}
  - {accept: "Shift+Tab", send: Control+Left, when: composing}
  # - {accept: "Tab", send: Control+Right, when: composing}
  - {accept: "Control+h", send: BackSpace, when: composing}
  - {accept: "Control+l", send: Delete, when: composing}
  - {accept: "Control+w", send: Control+BackSpace, when: composing}
  - {accept: "Control+d", send: Control+Delete, when: composing}
  - {accept: "Control+y", send: space, when: has_menu}
  - {accept: "Control+bracketleft", send: Escape, when: composing}
  - {accept: "Control+c", send: Escape, when: composing}
  - {accept: "KP_1", send: 1, when: composing}
  - {accept: "KP_2", send: 2, when: composing}
  - {accept: "KP_3", send: 3, when: composing}
  - {accept: "KP_4", send: 4, when: composing}
  - {accept: "KP_5", send: 5, when: composing}
  - {accept: "KP_6", send: 6, when: composing}
  - {accept: "KP_7", send: 7, when: composing}
  - {accept: "KP_8", send: 8, when: composing}
  - {accept: "KP_9", send: 9, when: composing}
  - {accept: "KP_0", send: 0, when: composing}
  - {accept: "KP_Multiply", send: asterisk, when: composing}
  - {accept: "KP_Add", send: plus, when: composing}
  - {accept: "KP_Subtract", send: minus, when: composing}
  - {accept: "KP_Divide", send: slash, when: composing}
  - {accept: "KP_Decimal", send: period, when: composing}
  - {accept: "Control+comma", toggle: ascii_punct, when: always}
  - {accept: "Control+period", toggle: full_shape, when: always}
  - {accept: "Control+KP_0", select: .next, when: always}
