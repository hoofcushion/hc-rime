local keymaps=require("hoofcushion.keymaps")
local switchers=require("hoofcushion.switchers")
local schema=std.extend(
 require("hoofcushion.schema.base"),
 require("hoofcushion.schema.hans"),
 require("hoofcushion.speller.fixed.hoofcushion"),
 {
  schema={
   schema_id="ts_cn_double",
   name="定长拼音",
   description=[[
汉语输入方案之定长
词库基于雾凇拼音 (https://github.com/iDvel/rime-ice)
]],
  },
  engine={
   translators={
    "lua_translator@*ts_fixed*translator@translator",
   },
  },
  translator={
   initial_quality=1,
   dictionary="ts_cn_quanpin",
   user_dict="ts_cn_double",
   prism="ts_cn_double",
   syllable_len=2,
  },
 },
 {
  key_binder={
   bindings={
    keymaps.ascii_punct,
    keymaps.full_shape,
    keymaps.filter_simplification,
    keymaps.filter_emoji,
    keymaps.filter_zhuyin,
    keymaps.filter_decensor,
    keymaps.filter_symbol,
    keymaps.filter_trans,
    keymaps.filter_Unicode,
    keymaps.filter_Reverse,
   },
  },
  switches={
   switchers.ascii_mode,
   switchers.ascii_punct,
   switchers.full_shape,
   switchers.filter_simplification,
   switchers.filter_emoji,
   switchers.filter_symbol,
   switchers.filter_zhuyin,
   switchers.filter_decensor,
   switchers.filter_trans,
   switchers.filter_Unicode,
   switchers.filter_Reverse,
  },
 },
 {
  filter_simplification={
   opencc_config="s2t.json",
  },
 },
 --- English
 {
  schema={
   dependencies={
    "ts_en",
   },
  },
  engine={
   translators={
    "lua_translator@*ts_en*translator@module_en",
   },
  },
  abc_segmentor={
   extra_tags={"english"},
  },
  module_en=std.extend(
   require("hoofcushion.schema.english").translator,
   {tag="english"}
  ),
 },
 --- Cn-En mixed
 {
  schema={
   dependencies={
    "module_cn_en_fixed",
   },
  },
  engine={
   translators={
    "script_translator@module_cn_en_fixed",
   },
  },
  module_cn_en_fixed={
   initial_quality=1,
   dictionary="module_cn_en",
   prism="module_cn_en_fixed",
  },
 },
 --- Reverse lookup
 {
  schema={
   dependencies={
    "module_fnua_cn",
   },
  },
  engine={
   segmentors=function(self)
    std.tbl.insert_at(self,"affix_segmentor@module_fnua_cn","matcher",1)
   end,
   processors=function(self)
    std.tbl.insert_at(self,"lua_processor@*reverse_pro*processor@module_fnua_cn","recognizer",1)
   end,
   translators={
    "lua_translator@*ts_cn_double.fnua@module_fnua_cn",
   },
  },
  module_fnua_cn={
   prefix="`",
   trigger="space",
   tag="module_fnua_cn",
   tips="〔拼音反查〕",
   dictionary="module_fnua_cn",
   spelling_hints=99,
   enable_user_dict=false,
  },
  recognizer={
   patterns={
    module_fnua_cn="`.*$",
   },
  },
 }
)
return schema
